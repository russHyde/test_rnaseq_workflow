import pandas as pd
import yaml
from os.path import join

from snakemake.utils import min_version
from snakemake.utils import validate

# validate requires snakemake >= 5.1
# `conda activate` requires snakemake >= 5.4.3
min_version("5.4.3")

# -- Configs

# ---- global snakemake config

validate(config, "conf_schemas/snake_config.schema.yaml")

# ---- definition of the samples for study here

def define_rnaseq_samples(filepath):
    rnaseq_samples = pd.read_csv(
        filepath, sep = "\t", comment="#"
    ).set_index(
        ["study_id", "sample_id", "run_id", "lane_id"], drop = False
    )
    rnaseq_samples.index = rnaseq_samples.index.set_levels(
        [i.astype(str) for i in rnaseq_samples.index.levels]
    )
    return rnaseq_samples


rnaseq_samples = define_rnaseq_samples(config["rnaseq_samples"])
validate(rnaseq_samples, "conf_schemas/rnaseq_samples.schema.yaml")

# ---- definition of command line params for the programs used here

rnaseq_program_params = yaml.safe_load(
    open(config["rnaseq_program_params"], "r")
)
validate(
    rnaseq_program_params, "conf_schemas/rnaseq_program_params.schema.yaml"
)

# ---- definition of the transcriptome / genome reference used here

rnaseq_reference_params = yaml.safe_load(
    open(config["rnaseq_reference_params"], "r")
)
validate(
    rnaseq_reference_params, "conf_schemas/rnaseq_reference_params.schema.yaml"
)

# -- workflows that produce files that are required by this workflow:

subworkflow prefilter:
    workdir:
        "../prefilter"
    snakefile:
        "../prefilter/Snakefile"
    configfile:
        "../prefilter/conf/snake_config.yaml"

# -- required files

# This ensures that the feature-counts for each sequencing sample on each lane
# are obtained:

required_files = expand(
    join(
        "data", "job", "{unit.study_id}", "{unit.sample_id}",
        "{unit.run_id}_{unit.lane_id}.fcount.short"
    ),
    unit=rnaseq_samples.itertuples()
)

# -- rules

rule all:
    input:
        required_files

rule faker:
    input:
        required_files
    output:
        "doc/fake_report.pdf"
    shell:
        "touch {output}"

# -- rule-defining scripts

include: "scripts/snake_recipes/hisat2.smk"
include: "scripts/snake_recipes/featureCounts.smk"
